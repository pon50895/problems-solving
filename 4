<?php

$map = '1111111\n1000001\n10S1001\n1001001\n10000E1\n1000001\n1111111';
echo solution($map);

function solution($map){
    $input = $map ;
    #split map to array
    $input = explode('\n',$input);
    #turns strings in array into array elements
    $i = 0;
    $map_size =Array(count($input));
    while (!empty($input[$i]))
    {
        $now_map[$i]=preg_split('//', $input[$i], -1, PREG_SPLIT_NO_EMPTY);
        $map_size[$i]=count($now_map[$i]);
        $i = $i + 1 ;
    }
    #get information of start point
    $start_point = get_coordinate($now_map,'S');
    #claim global point list
    global $point_list_to_do;
    #initialization point list to do 
    $point_list_to_do[0] =[$start_point[0],$start_point[1],1];
    $point_list_to_do[1] =[$start_point[0],$start_point[1],2];
    $point_list_to_do[2] =[$start_point[0],$start_point[1],3];
    $point_list_to_do[3] =[$start_point[0],$start_point[1],4];
    #get information of end point
    $end_point   = get_coordinate($now_map,'E');
    $now_map = arr_str_replace('1','X',$now_map);
    $now_map = arr_str_replace('E','0',$now_map);
    $now_map = arr_str_replace('S','0',$now_map);
    #set for stop count
    $map_before_change = $now_map;
    $try_time_limit = max(count($map_size),count($map_size[0]))*3;
    $times = 0 ;
    foreach($GLOBALS['point_list_to_do'] as $start_point){
        $now_map = count_step($start_point,$now_map,$map_size);
        if($map_before_change==$now_map){
            $times = $times +1 ;
            #check if try times greater than limit times
            if($try_time_limit<= $times){
                break;
            }
        }else{
            $times = 0;
            $map_before_change = $now_map;
        }
    }
    return get_final_number($now_map,$end_point);
}

function get_coordinate($map,$target){
    foreach ($map as $x=>$array){
        foreach($array as $y=>$value){
            if($value == $target){
                $result[0]=$x;
                $result[1]=$y;
                return $result;
            }
        }
    }
}
function arr_str_replace($from,$to,$map){
    foreach ($map as $x=>$array){
        foreach($array as $y=>$value){
            if($value == $from){
                $map[$x][$y] = $to;
            }
        }
    }
    return $map;
}
function count_step($start_point,$now_map,$map_size){
    $boundary = check_boundary($start_point,$now_map,$map_size);
    $moveableness = check_moveable($start_point,$now_map);
    if( $boundary ){
        if( $moveableness ){
            $start_x = $start_point[0];
            $start_y = $start_point[1];
            switch($start_point[2]){
                case 1:
                    $now_map[$start_x-1][$start_y]=($now_map[$start_x-1][$start_y]>$now_map[$start_x][$start_y]+1||$now_map[$start_x-1][$start_y]==0)?($now_map[$start_x][$start_y]+1):($now_map[$start_x-1][$start_y]);
                    /*if($now_map[$start_x-1][$start_y]==0){
                        $now_map[$start_x-1][$start_y]=$now_map[$start_x][$start_y]+1;
                    }elseif($now_map[$start_x-1][$start_y]>$now_map[$start_x][$start_y]+1){
                        $now_map[$start_x-1][$start_y]=$now_map[$start_x][$start_y]+1;
                    }*/
                    break;
                case 2:
                    $now_map[$start_x][$start_y+1]=($now_map[$start_x][$start_y+1]>$now_map[$start_x][$start_y]+1||$now_map[$start_x][$start_y+1]==0)?($now_map[$start_x][$start_y]+1):($now_map[$start_x][$start_y+1]);
                    break;
                case 3:
                    $now_map[$start_x+1][$start_y]=($now_map[$start_x+1][$start_y]>$now_map[$start_x][$start_y]+1||$now_map[$start_x+1][$start_y]==0)?($now_map[$start_x][$start_y]+1):($now_map[$start_x+1][$start_y]);
                    break;
                case 4:                        
                    $now_map[$start_x][$start_y-1]=($now_map[$start_x][$start_y-1]>$now_map[$start_x][$start_y]+1||$now_map[$start_x][$start_y-1]==0)?($now_map[$start_x][$start_y]+1):($now_map[$start_x][$start_y-1]);
                    break;                    
            }
            reflash_point_list_to_do($start_point);
        }
    }
    #remove used point and vector
    array_shift($GLOBALS['point_list_to_do']);
    return $now_map;
}
function get_point_to_check($start_point){
    $point_to_check[0] = $start_point[0];
    $point_to_check[1] = $start_point[1];
    switch ($start_point[2]){
        case 1:
            $point_to_check[0]=$point_to_check[0] -1;
            break;
        case 2:
            $point_to_check[1]=$point_to_check[1] +1;
            break;
        case 3:
            $point_to_check[0]=$point_to_check[0] +1;
            break;
        case 4:
            $point_to_check[1]=$point_to_check[1] -1;
            break;
    }
    return $point_to_check ;
}
function check_boundary($start_point,$map_size){
    $point_to_check = get_point_to_check($start_point);
    $start_x = $start_point[0];
    switch($start_point[2]){
        case 1:
            if( $point_to_check[0] <0){
                return 0 ;
            }
            break;
        case 2:
            if( $point_to_check[1] > count($map_size[$start_x])-1 ){
                return 0 ;
            }
            break;
        case 3:
            if( $point_to_check[0] > count($map_size)-1){
                return 0 ;
            }
            break;
        case 4:
            if( $point_to_check[1] <0){
                return 0 ;
            }
            break;
    }
    return 1 ;
}
function check_moveable($start_point,$now_map){
    $point_to_check = get_point_to_check($start_point);
    $x_coordinate = $point_to_check[0];
    $y_coordinate = $point_to_check[1];
    if($now_map[$x_coordinate][$y_coordinate] == 'X'){
        return 0 ;
    }else{
        return 1 ;
    }     

}
function reflash_point_list_to_do($start_point){
    $up_point    = [$start_point[0]-1 ,$start_point[1]   ];
    $right_point = [$start_point[0]   ,$start_point[1]+1 ];
    $down_point  = [$start_point[0]+1 ,$start_point[1]   ];
    $left_point  = [$start_point[0]   ,$start_point[1]-1 ];
    $length_of_point_list =count($GLOBALS['point_list_to_do']);
    switch($start_point[2]){
        case 1:
            $up_point[2]=1;
            $GLOBALS['point_list_to_do'][$length_of_point_list  ] =[$up_point[0],$up_point[1],$up_point[2]];
            $up_point[2]=2;
            $GLOBALS['point_list_to_do'][$length_of_point_list+1] =[$up_point[0],$up_point[1],$up_point[2]];
            $up_point[2]=4;
            $GLOBALS['point_list_to_do'][$length_of_point_list+2] =[$up_point[0],$up_point[1],$up_point[2]];
            break;
        case 2:
            $right_point[2]=1;
            $GLOBALS['point_list_to_do'][$length_of_point_list  ] =[$right_point[0],$right_point[1],$right_point[2]];
            $right_point[2]=2;
            $GLOBALS['point_list_to_do'][$length_of_point_list+1] =[$right_point[0],$right_point[1],$right_point[2]];
            $right_point[2]=3;
            $GLOBALS['point_list_to_do'][$length_of_point_list+2] =[$right_point[0],$right_point[1],$right_point[2]];
            break;
        case 3:
            $down_point[2]=2;
            $GLOBALS['point_list_to_do'][$length_of_point_list  ] =[$down_point[0],$down_point[1],$down_point[2]];
            $down_point[2]=3;
            $GLOBALS['point_list_to_do'][$length_of_point_list+1] =[$down_point[0],$down_point[1],$down_point[2]];
            $down_point[2]=4;
            $GLOBALS['point_list_to_do'][$length_of_point_list+2] =[$down_point[0],$down_point[1],$down_point[2]];
            break;
        case 4:
            $left_point[2]=3;
            $GLOBALS['point_list_to_do'][$length_of_point_list  ] =[$left_point[0],$left_point[1],$left_point[2]];
            $left_point[2]=4;
            $GLOBALS['point_list_to_do'][$length_of_point_list+1] =[$left_point[0],$left_point[1],$left_point[2]];
            $left_point[2]=1;
            $GLOBALS['point_list_to_do'][$length_of_point_list+2] =[$left_point[0],$left_point[1],$left_point[2]];
            break;
    }
    return 0;
}
function get_final_number($now_map,$end_point){
    $end_point_x  = $end_point[0];
    $end_point_y  = $end_point[1];
    return $now_map[$end_point_x][$end_point_y]-1;    
}
?>
