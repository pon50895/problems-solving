/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/


/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = $val; }
 * }
 */
class Solution {

    /**
     * @param ListNode $l1
     * @param ListNode $l2
     * @return ListNode
     */
    private $l1;
    private $l2;
    
    function addTwoNumbers($l1, $l2) {
        $sum = $this->get_decimal($l1) + $this->get_decimal($l2);
        if($sum === 0)
        {
            $return->val = 0;
            $return->next = null;
            return $return;
        }
        return $this->get_ListNode($sum);
    }
    
    function get_decimal($listnode)
    {
        $i = 0;
        $return = 0;
        while($listnode->next != null)
        {
            $return += 10 ** $i * $listnode->val;
            $listnode = $listnode->next;
            $i++;
        }
        $return += 10 ** $i * $listnode->val;
        return $return ;
    }
    
    function get_ListNode($sum)
    {
        if($sum != 0)
        {
            $return->val  = $sum % 10;
            $return->next = ($sum - $return->val) / 10;
            $return->next = $this->get_ListNode($return->next);
        }
        return $return;
    }
    
}
